//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApiExample
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestEntities1 : DbContext
    {
        public TestEntities1()
            : base("name=TestEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetAgentHighestOrderSum_Result> GetAgentHighestOrderSum(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentHighestOrderSum_Result>("GetAgentHighestOrderSum", yearParameter);
        }
    
        public virtual int GetAgentWithOrder(Nullable<int> orderChronologicall)
        {
            var orderChronologicallParameter = orderChronologicall.HasValue ?
                new ObjectParameter("OrderChronologicall", orderChronologicall) :
                new ObjectParameter("OrderChronologicall", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAgentWithOrder", orderChronologicallParameter);
        }
    
        public virtual ObjectResult<GetAgentWithOrdersByYearAndCount_Result> GetAgentWithOrdersByYearAndCount(Nullable<int> year, Nullable<int> count)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentWithOrdersByYearAndCount_Result>("GetAgentWithOrdersByYearAndCount", yearParameter, countParameter);
        }
    }
}
